		===============================================
					 frozenset
		===============================================
=>'frozenset' is one of the pre-defined class and treated as set data type.
=>The purpose of frozenset data type is that "To store Multiple Values either Simiar Type or          Different Type or Both the Types in Single Object with Unique  Values".
=>The elements of frozenset must be obtained from different objects like set , tuple and list
		Syntax:   frozensetobj=frozenset(set/list/tuple)
=>An Object of frozenset never maintains Insertion Order bcoz PVM can display any one of the  possibility of elements of frozenset object.
=>On the object of frozenset, we can't perform Indexing and Slicing Operations bcoz frozenset object never maintains Insertion Order.
=>An object of frozenset belongs to  Immutable bcoz frozenset' object does not support item  assignment and  not possible to modify / Change.
=>we can create two types of frozenset objects. They are
			a) Empty frozenset
			b) Non-Empty  frozenset
a) Empty frozenset:
----------------------------------
=>An Empty  frozenset is one, which does not contain any elements and whose length is 0
=>Syntax:        frozensetobj=frozenset()

b) Non-Empty frozenset:
------------------------
=>A Non-Empty frozenset is one, which  contains  elements and whose length is >0
=>Syntax:         frozensetobj=frozenset( { val1, val2, ....val-n } )
=>Syntax:         frozensetobj=frozenset( ( val1, val2, ....val-n ) )
=>Syntax:         frozensetobj=frozenset( [ val1, val2, ....val-n ] )
=>Syntax:         frozensetobj=frozenset( object )
-------------------------------------------------------------------------------------------------------------
=>Note:  The Functionality of Frozenset is extactly similar to Set but set object belongs to both Mutable and Immutable where as frozenset object belongs to immutable.
-------------------------------------------------------------------------------------------------------------
Examples:
---------------------------------------------------------------
>>> s1={10,20,30,40,10}
>>> print(s1,type(s1))-------------------{40, 10, 20, 30} <class 'set'>
>>> fs=frozenset(s1)
>>> print(fs,type(fs))---------------frozenset({40, 10, 20, 30}) <class 'frozenset'>
>>> t1=(10,"Rossum",34.56,"Python")
>>> fs=frozenset(t1)
>>> print(fs,type(fs))-----------------frozenset({10, 34.56, 'Python', 'Rossum'}) <class 'frozenset'>
>>> fs[0]--------------TypeError: 'frozenset' object is not subscriptable
>>> fs[0:3]-----------TypeError: 'frozenset' object is not subscriptable
>>> len(fs)-----------4
>>> fs1=frozenset()
>>> print(fs1,type(fs1))-------------frozenset() <class 'frozenset'>
>>> len(fs1)-------------0
---------------------------------------------------
>>> fs1.add(10)------------------AttributeError: 'frozenset' object has no attribute 'add'
>>> fs-------------------------frozenset({10, 34.56, 'Python', 'Rossum'})
>>> fs[0]=123---------------TypeError: 'frozenset' object does not support item assignment
>>> fs1.remove(10)------------AttributeError: 'frozenset' object has no attribute 'remove'
===================================X==============================





