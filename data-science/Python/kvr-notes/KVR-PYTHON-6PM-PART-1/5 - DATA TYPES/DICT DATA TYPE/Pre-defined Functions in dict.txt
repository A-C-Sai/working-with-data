		=============================================
			Pre-defined Functions in dict
		=============================================
=>To perform various Operation on dict object, we have the following Functions in dict object.
--------------------------------------------------------------------------------------------------------------------------
1.clear()
--------------------------------------------------------------------------------------------------------------------------
=>Syntax: dictobj.clear()
=>This Function is used for removing all the elements of dict object
Examples:
----------------
>>> d1={"RS":"Python","DR":"C","ST":"C++","JG":"JAVA"}
>>> print(d1,type(d1),id(d1))---{'RS': 'Python', 'DR': 'C', 'ST': 'C++', 'JG': 'JAVA'} <class 'dict'>													1276165114560
>>> len(d1)----------4
>>> d1.clear()
>>> print(d1,type(d1),id(d1))--------{} <class 'dict'> 1276165114560
>>> len(d1)-----------0
>>> d1.clear()---------------- No O/P
	(OR)
>>> print(d1.clear())----------None
--------------------------------------------------------------------------------------------------------------------------
2. pop(key)
--------------------------------------------------------------------------------------------------------------------------
=>Syntax:    dictobj.pop(Key)
=>This Function is used for removing (Key,Value) from dict by passing  Value of Key.
=>If Key does not exist then we get KeyError.
-----------------
Examples:
-----------------
>>> d1={"RS":"Python","DR":"C","ST":"C++","JG":"JAVA"}
>>> print(d1,id(d1))---------{'RS': 'Python', 'DR': 'C', 'ST': 'C++', 'JG': 'JAVA'} 1276165114752
>>> d1.pop("JG")--------'JAVA'
>>> print(d1,id(d1))--------{'RS': 'Python', 'DR': 'C', 'ST': 'C++'} 1276165114752
>>> d1.pop("DR")---------'C'
>>> print(d1,id(d1))--------{'RS': 'Python', 'ST': 'C++'} 1276165114752
>>> d1.pop("RS")-------'Python'
>>> print(d1,id(d1))--------{'ST': 'C++'} 1276165114752
>>> d1.pop("ST")----------'C++'
>>> print(d1,id(d1))----------{} 1276165114752
>>> d1.pop("RS")-------------KeyError: 'RS'
>>> {}.pop("10")----------KeyError: '10'
>>> dict().pop(12)-------KeyError: 12
--------------------------------------------------------------------------------------------------------------------------
3) popitem()
--------------------------------------------------------------------------------------------------------------------------
=>Syntax: dictobj.popitem()
=>This Function removes Last (Key,value) from dict object.
=>If we call this function on empty dict object then we get KeyError.
-------------------------
Examples:
-------------------------
>>> d1={"RS":"Python","DR":"C","ST":"C++","JG":"JAVA"}
>>> print(d1,id(d1))-----------{'RS': 'Python', 'DR': 'C', 'ST': 'C++', 'JG': 'JAVA'} 1276165437440
>>> d1.popitem()-------('JG', 'JAVA')
>>> print(d1,id(d1))-------{'RS': 'Python', 'DR': 'C', 'ST': 'C++'} 1276165437440
>>> d1.popitem()--------('ST', 'C++')
>>> print(d1,id(d1))---------{'RS': 'Python', 'DR': 'C'} 1276165437440
>>> d1.popitem()----------('DR', 'C')
>>> print(d1,id(d1))------------{'RS': 'Python'} 1276165437440
>>> d1.popitem()------------('RS', 'Python')
>>> print(d1,id(d1))--------------{} 1276165437440
>>> d1.popitem()----------KeyError: 'popitem(): dictionary is empty'
>>> {}.popitem()-----------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()-------KeyError: 'popitem(): dictionary is empty'
--------------------------------------------------------------------------------------------------------------------------
4) copy()
--------------------------------------------------------------------------------------------------------------------------
=>Syntax:      dictobj2=dictobj1.copy()
=>Thisd Function is used for copying the content of one dict object into another dict object( Shallow Copy) --------> at least for single layer data. i.e. try {10:[1,2,3],20:[3,4,5]}
--------------------------------
Examples:
--------------------------------
>>> d1={10:"RS",20:"TR"}
>>> print(d1,id(d1))---------------{10: 'RS', 20: 'TR'} 1276169358784
>>> d2=d1.copy()
>>> print(d2,id(d2))-------------{10: 'RS', 20: 'TR'} 1276165437440
>>> d1[30]="MC"
>>> d2[40]="JG"
>>> print(d1,id(d1))-----------{10: 'RS', 20: 'TR', 30: 'MC'} 1276169358784
>>> print(d2,id(d2))-----------{10: 'RS', 20: 'TR', 40: 'JG'} 1276165437440
--------------------------------------------------------------------------------------------------------------------------
5) get()
--------------------------------------------------------------------------------------------------------------------------
=>This Function is used for obtaining Value of Value (Not None) by Passing Value of Key
=>if the value of key does not exist then we get None as result
=>Syntax:    varname=dictobj.get(Key)
				(OR)
			dictobj.get(key)
Examples:
-----------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)-------------------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> d1.get(10)----------------'RS'
>>> d1.get(20)----------------'TR'
>>> d1.get(200)		NO Output
		(OR)
>>> print(d1.get(200))--------None
------------------------------------------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)-----------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> v=d1.get(10)
>>> print(v)------------RS
>>> v=d1.get(100)
>>> print(v)---------None
			(OR)
=>Another way to get the value of Value by Passing Value of Key by using the following Syntax;

			dictobj[Key]
Examples:
-------------------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)---------------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> d1[10]-----------------'RS'
>>> d1[20]-----------------'TR'
>>> d1[30]----------------'MC'
>>> d1[300]--------------KeyError: 300
-------------------------------------------------------------------------------------------------------------------------
6) keys()
-------------------------------------------------------------------------------------------------------------------------
=>Syntax:   dictobj.keys()
			(OR)
		varname=dictobj.keys()
=>This Function is used for obtaning the values of Key.

Examples:
------------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)---------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> d1.keys()-----------dict_keys([10, 20, 30])
>>> ks=d1.keys()
>>> print(ks)---------------dict_keys([10, 20, 30])
>>> for k in ks:
...     print(k)
			...
			10
			20
			30
>>> for k in ks:
...     print(k,"-->",d1.get(k))
...
			10 --> RS
			20 --> TR
			30 --> MC
>>> for k in ks:
...     print(k,"-->",d1[k])
...
			10 --> RS
			20 --> TR
			30 --> MC
-------------------------------------------------------------------------------------------------------------------------
7) values()
-------------------------------------------------------------------------------------------------------------------------
Syntax:    dictobj.values()
			(OR)
		varname=dictobj.values()
=>This Function is used for obtaning the values of Value.
Examples:
------------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)------------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> d1.values()-----------dict_values(['RS', 'TR', 'MC'])
>>> vs=d1.values()
>>> print(vs)------------dict_values(['RS', 'TR', 'MC'])
>>> for v in vs:
...     print(v)
			...
			RS
			TR
			MC
Special Point:
-----------------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)------------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> for x in d1:
...     print(x)
			...
			10
			20
			30
>>> for x in d1:
...     print(x,"-->",d1[x])
...
			10 --> RS
			20 --> TR
			30 --> MC
>>> for x in d1:
...     print(x,"-->",d1.get(x))
			...
			10 --> RS
			20 --> TR
			30 --> MC
-------------------------------------------------------------------------------------------------------------------------
8) items()
-------------------------------------------------------------------------------------------------------------------------
=>Syntax:-     dictobj.items()
				(OR)
			varname=dictobj.items()
=>This Function is used for obtaining (Key,Value) in the form of List of tuples.
Examples:
----------------
>>> d1={10: 'RS', 20: 'TR', 30: 'MC'}
>>> print(d1)-----------{10: 'RS', 20: 'TR', 30: 'MC'}
>>> d1.items()------dict_items([(10, 'RS'), (20, 'TR'), (30, 'MC')])
>>> kvs=d1.items()
>>> print(kvs)----------dict_items([(10, 'RS'), (20, 'TR'), (30, 'MC')])
>>> for item in kvs:
...     print(item)
...
			(10, 'RS')
			(20, 'TR')
			(30, 'MC')
>>> for k,v in kvs:
...     print(k,"-->",v)
...
			10 --> RS
			20 --> TR
			30 --> MC
Special Notes
----------------------
>>> l1=[(10,"Apple"),(20,"Mango"),(30,"Kiwi")]
>>> print(l1,type(l1))------------[(10, 'Apple'), (20, 'Mango'), (30, 'Kiwi')] <class 'list'>
>>> d1=dict(l1)
>>> print(d1,type(d1))------------{10: 'Apple', 20: 'Mango', 30: 'Kiwi'} <class 'dict'>
-------------------------------------------------------------------------------------------------------------------------
9) update()
-------------------------------------
=>Syntax

Examples:
------------------
>>> d1={10:1.2,20:2.3}
>>> d2={30:3.4,40:4.5}
>>> print(d1)-------------{10: 1.2, 20: 2.3}
>>> print(d2)-------------{30: 3.4, 40: 4.5}
>>> d1.update(d2)
>>> print(d1)-----------{10: 1.2, 20: 2.3, 30: 3.4, 40: 4.5}
----------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={30:3.4,20:4.5}
>>> print(d1)------------{10: 1.2, 20: 2.3}
>>> print(d2)------------{30: 3.4, 20: 4.5}
>>> d1.update(d2)
>>> print(d1)-------------{10: 1.2, 20: 4.5, 30: 3.4}
------------------------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={10:3.4,20:4.5}
>>> print(d1)----------{10: 1.2, 20: 2.3}
>>> print(d2)-----------{10: 3.4, 20: 4.5}
>>> d1.update(d2)
>>> print(d1)--------------{10: 3.4, 20: 4.5}
-----------------------------------------------------------------------------------------
Special Note Points:
----------------------------------------------------------------------------------------
>>> d1={10:["Python","D.Sc","Django"],20:("C","C++","DSA"),30:{"Java","Adv.Java","Spring","Spring Boot"} }
>>> print(d1,type(d1))
{10: ['Python', 'D.Sc', 'Django'], 20: ('C', 'C++', 'DSA'), 30: {'Spring', 'Java', 'Adv.Java', 'Spring Boot'}} <class 'dict'>
>>> for k,v in d1.items():
...     print(k,"-->",v,"-->",type(v))
...
		10 --> ['Python', 'D.Sc', 'Django'] --> <class 'list'>
		20 --> ('C', 'C++', 'DSA') --> <class 'tuple'>
		30 --> {'Spring', 'Java', 'Adv.Java', 'Spring Boot'} --> <class 'set'>
========================X=============================